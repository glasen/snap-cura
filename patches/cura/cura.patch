diff -upNr Cura-4.6.2.orig/CMakeLists.txt Cura-4.6.2.patched/CMakeLists.txt
--- Cura-4.6.2.orig/CMakeLists.txt	2020-07-13 16:45:04.000000000 +0200
+++ Cura-4.6.2.patched/CMakeLists.txt	2020-07-30 21:27:02.588384308 +0200
@@ -63,7 +63,8 @@ endif()
 
 
 install(DIRECTORY resources
-        DESTINATION ${CMAKE_INSTALL_DATADIR}/cura)
+        DESTINATION ${CMAKE_INSTALL_DATADIR}/cura
+        PATTERN resources/themes/cura-light/fonts EXCLUDE)
 
 include(CuraPluginInstall)
 
diff -upNr Cura-4.6.2.orig/cura/CuraVersion.py.in Cura-4.6.2.patched/cura/CuraVersion.py.in
--- Cura-4.6.2.orig/cura/CuraVersion.py.in	2020-07-13 16:45:04.000000000 +0200
+++ Cura-4.6.2.patched/cura/CuraVersion.py.in	2020-07-30 21:27:02.588384308 +0200
@@ -5,8 +5,8 @@ CuraAppName = "@CURA_APP_NAME@"
 CuraAppDisplayName = "@CURA_APP_DISPLAY_NAME@"
 CuraVersion = "@CURA_VERSION@"
 CuraBuildType = "@CURA_BUILDTYPE@"
-CuraDebugMode = True if "@_cura_debugmode@" == "ON" else False
+CuraDebugMode = False # Always disable debug mode
 CuraCloudAPIRoot = "@CURA_CLOUD_API_ROOT@"
 CuraCloudAPIVersion = "@CURA_CLOUD_API_VERSION@"
 CuraCloudAccountAPIRoot = "@CURA_CLOUD_ACCOUNT_API_ROOT@"
-CuraMarketplaceRoot = "@CURA_MARKETPLACE_ROOT@"
\ Kein Zeilenumbruch am Dateiende.
+CuraMarketplaceRoot = "@CURA_MARKETPLACE_ROOT@"
diff -upNr Cura-4.6.2.orig/cura/UI/CuraSplashScreen.py Cura-4.6.2.patched/cura/UI/CuraSplashScreen.py
--- Cura-4.6.2.orig/cura/UI/CuraSplashScreen.py	2020-07-13 16:45:04.000000000 +0200
+++ Cura-4.6.2.patched/cura/UI/CuraSplashScreen.py	2020-07-30 21:27:02.588384308 +0200
@@ -70,12 +70,12 @@ class CuraSplashScreen(QSplashScreen):
         font = QFont()  # Using system-default font here
         font.setPixelSize(18)
         painter.setFont(font)
-        painter.drawText(60, 70 + self._version_y_offset, 330 * self._scale, 230 * self._scale, Qt.AlignLeft | Qt.AlignTop, version[0])
+        painter.drawText(60, 70 + int(self._version_y_offset), 330 * self._scale, 230 * self._scale, int(Qt.AlignLeft | Qt.AlignTop), version[0])
         if len(version) > 1:
             font.setPixelSize(16)
             painter.setFont(font)
             painter.setPen(QColor(200, 200, 200, 255))
-            painter.drawText(247, 105 + self._version_y_offset, 330 * self._scale, 255 * self._scale, Qt.AlignLeft | Qt.AlignTop, version[1])
+            painter.drawText(247, 105 + int(self._version_y_offset), 330 * self._scale, 255 * self._scale, int(Qt.AlignLeft | Qt.AlignTop), version[1])
         painter.setPen(QColor(255, 255, 255, 255))
 
         # Draw the loading image
@@ -93,9 +93,7 @@ class CuraSplashScreen(QSplashScreen):
             pen.setColor(QColor(255, 255, 255, 255))
             painter.setPen(pen)
             painter.setFont(font)
-            painter.drawText(100, 128, 170, 64,
-                             Qt.AlignLeft | Qt.AlignVCenter | Qt.TextWordWrap,
-                             self._current_message)
+            painter.drawText(100, 128, 170, 64, int(Qt.AlignLeft | Qt.AlignVCenter | Qt.TextWordWrap), self._current_message)
 
         painter.restore()
         super().drawContents(painter)
diff -upNr Cura-4.6.2.orig/cura/UI/ObjectsModel.py Cura-4.6.2.patched/cura/UI/ObjectsModel.py
--- Cura-4.6.2.orig/cura/UI/ObjectsModel.py	2020-07-13 16:45:04.000000000 +0200
+++ Cura-4.6.2.patched/cura/UI/ObjectsModel.py	2020-07-30 21:27:02.588384308 +0200
@@ -62,7 +62,7 @@ class ObjectsModel(ListModel):
         self._group_name_template = catalog.i18nc("@label", "Group #{group_nr}")
         self._group_name_prefix = self._group_name_template.split("#")[0]
 
-        self._naming_regex = re.compile("^(.+)\(([0-9]+)\)$")
+        self._naming_regex = re.compile(r"^(.+)\(([0-9]+)\)$")
 
     def setActiveBuildPlate(self, nr: int) -> None:
         if self._build_plate_number != nr:
diff -upNr Cura-4.6.2.orig/plugins/FirmwareUpdateChecker/FirmwareUpdateChecker.py Cura-4.6.2.patched/plugins/FirmwareUpdateChecker/FirmwareUpdateChecker.py
--- Cura-4.6.2.orig/plugins/FirmwareUpdateChecker/FirmwareUpdateChecker.py	2020-07-13 16:45:04.000000000 +0200
+++ Cura-4.6.2.patched/plugins/FirmwareUpdateChecker/FirmwareUpdateChecker.py	2020-07-30 21:27:02.588384308 +0200
@@ -28,7 +28,7 @@ class FirmwareUpdateChecker(Extension):
 
         # Listen to a Signal that indicates a change in the list of printers, just if the user has enabled the
         # "check for updates" option
-        Application.getInstance().getPreferences().addPreference("info/automatic_update_check", True)
+        Application.getInstance().getPreferences().addPreference("info/automatic_update_check", False)
         if Application.getInstance().getPreferences().getValue("info/automatic_update_check"):
             ContainerRegistry.getInstance().containerAdded.connect(self._onContainerAdded)
 
diff -upNr Cura-4.6.2.orig/plugins/PostProcessingPlugin/Script.py Cura-4.6.2.patched/plugins/PostProcessingPlugin/Script.py
--- Cura-4.6.2.orig/plugins/PostProcessingPlugin/Script.py	2020-07-13 16:45:04.000000000 +0200
+++ Cura-4.6.2.patched/plugins/PostProcessingPlugin/Script.py	2020-07-30 21:27:02.588384308 +0200
@@ -116,7 +116,7 @@ class Script:
         if not key in line or (';' in line and line.find(key) > line.find(';')):
             return default
         sub_part = line[line.find(key) + 1:]
-        m = re.search('^-?[0-9]+\.?[0-9]*', sub_part)
+        m = re.search(r"^-?[0-9]+\.?[0-9]*", sub_part)
         if m is None:
             return default
         try:
diff -upNr Cura-4.6.2.orig/plugins/PostProcessingPlugin/scripts/ChangeAtZ.py Cura-4.6.2.patched/plugins/PostProcessingPlugin/scripts/ChangeAtZ.py
--- Cura-4.6.2.orig/plugins/PostProcessingPlugin/scripts/ChangeAtZ.py	2020-07-13 16:45:04.000000000 +0200
+++ Cura-4.6.2.patched/plugins/PostProcessingPlugin/scripts/ChangeAtZ.py	2020-07-30 21:27:02.588384308 +0200
@@ -294,7 +294,7 @@ class ChangeAtZ(Script):
             m = re.search("^[+-]?[0-9]*", subPart)
         else:
             #the minus at the beginning allows for negative values, e.g. for delta printers
-            m = re.search("^[-]?[0-9]*\.?[0-9]*", subPart)
+            m = re.search(r"^[-]?[0-9]*\.?[0-9]*", subPart)
         if m == None:
             return default
         try:
diff -upNr Cura-4.6.2.orig/plugins/PostProcessingPlugin/scripts/ColorMix.py Cura-4.6.2.patched/plugins/PostProcessingPlugin/scripts/ColorMix.py
--- Cura-4.6.2.orig/plugins/PostProcessingPlugin/scripts/ColorMix.py	2020-07-13 16:45:04.000000000 +0200
+++ Cura-4.6.2.patched/plugins/PostProcessingPlugin/scripts/ColorMix.py	2020-07-30 21:27:02.588384308 +0200
@@ -112,7 +112,7 @@ class ColorMix(Script):
             m = re.search("^[+-]?[0-9]*", subPart)
         else:
             #the minus at the beginning allows for negative values, e.g. for delta printers
-            m = re.search("^[-]?[0-9]*\.?[0-9]*", subPart)
+            m = re.search(r"^[-]?[0-9]*\.?[0-9]*", subPart)
         if m == None:
             return default
         try:
diff -upNr Cura-4.6.2.orig/plugins/RemovableDriveOutputDevice/RemovableDrivePlugin.py Cura-4.6.2.patched/plugins/RemovableDriveOutputDevice/RemovableDrivePlugin.py
--- Cura-4.6.2.orig/plugins/RemovableDriveOutputDevice/RemovableDrivePlugin.py	2020-07-13 16:45:04.000000000 +0200
+++ Cura-4.6.2.patched/plugins/RemovableDriveOutputDevice/RemovableDrivePlugin.py	2020-07-30 21:27:02.588384308 +0200
@@ -1,9 +1,7 @@
 # Copyright (c) 2017 Ultimaker B.V.
 # Cura is released under the terms of the LGPLv3 or higher.
 
-# Python built-ins
-import threading
-import time
+from PyQt5.QtCore import QTimer
 
 # Uranium/Messaging
 from UM.Logger import Logger
@@ -20,19 +18,19 @@ class RemovableDrivePlugin(OutputDeviceP
     def __init__(self):
         super().__init__()
 
-        self._update_thread = threading.Thread(target = self._updateThread)
-        self._update_thread.setDaemon(True)
+        self._timer = QTimer(interval=5000)
+        self._timer.timeout.connect(self._updateThread)
 
         self._check_updates = True
 
         self._drives = {}
 
     def start(self):
-        self._update_thread.start()
+        self._timer.start()
 
     def stop(self):
         self._check_updates = False
-        self._update_thread.join()
+        self._timer.stop()
 
         self._addRemoveDrives({})
 
@@ -55,10 +53,9 @@ class RemovableDrivePlugin(OutputDeviceP
         raise NotImplementedError()
 
     def _updateThread(self):
-        while self._check_updates:
+        if self._check_updates:
             result = self.checkRemovableDrives()
             self._addRemoveDrives(result)
-            time.sleep(5)
 
     def _addRemoveDrives(self, drives):
         # First, find and add all new or changed keys
diff -upNr Cura-4.6.2.orig/plugins/SliceInfoPlugin/SliceInfo.py Cura-4.6.2.patched/plugins/SliceInfoPlugin/SliceInfo.py
--- Cura-4.6.2.orig/plugins/SliceInfoPlugin/SliceInfo.py	2020-07-13 16:45:04.000000000 +0200
+++ Cura-4.6.2.patched/plugins/SliceInfoPlugin/SliceInfo.py	2020-07-30 21:27:02.588384308 +0200
@@ -40,7 +40,7 @@ class SliceInfo(QObject, Extension):
         self._application = CuraApplication.getInstance()
 
         self._application.getOutputDeviceManager().writeStarted.connect(self._onWriteStarted)
-        self._application.getPreferences().addPreference("info/send_slice_info", True)
+        self._application.getPreferences().addPreference("info/send_slice_info", False)
         self._application.getPreferences().addPreference("info/asked_send_slice_info", False)
 
         self._more_info_dialog = None
diff -upNr Cura-4.6.2.orig/plugins/USBPrinting/USBPrinterOutputDeviceManager.py Cura-4.6.2.patched/plugins/USBPrinting/USBPrinterOutputDeviceManager.py
--- Cura-4.6.2.orig/plugins/USBPrinting/USBPrinterOutputDeviceManager.py	2020-07-13 16:45:04.000000000 +0200
+++ Cura-4.6.2.patched/plugins/USBPrinting/USBPrinterOutputDeviceManager.py	2020-07-30 21:57:21.093681002 +0200
@@ -1,13 +1,11 @@
 # Copyright (c) 2018 Ultimaker B.V.
 # Cura is released under the terms of the LGPLv3 or higher.
 
-import threading
-import time
 import serial.tools.list_ports
 from os import environ
 from re import search
 
-from PyQt5.QtCore import QObject, pyqtSignal
+from PyQt5.QtCore import QObject, pyqtSignal, QTimer
 
 from UM.Signal import Signal, signalemitter
 from UM.OutputDevice.OutputDevicePlugin import OutputDevicePlugin
@@ -37,8 +35,9 @@ class USBPrinterOutputDeviceManager(QObj
         self._serial_port_list = []
         self._usb_output_devices = {}
         self._usb_output_devices_model = None
-        self._update_thread = threading.Thread(target = self._updateThread)
-        self._update_thread.setDaemon(True)
+
+        self._timer = QTimer(self, interval=5000)
+        self._timer.timeout.connect(self._updateThread)
 
         self._check_updates = True
 
@@ -56,10 +55,11 @@ class USBPrinterOutputDeviceManager(QObj
 
     def start(self):
         self._check_updates = True
-        self._update_thread.start()
+        self._timer.start()
 
     def stop(self, store_data: bool = True):
         self._check_updates = False
+        self._timer.stop()
 
     def _onConnectionStateChanged(self, serial_port):
         if serial_port not in self._usb_output_devices:
@@ -72,18 +72,14 @@ class USBPrinterOutputDeviceManager(QObj
             self.getOutputDeviceManager().removeOutputDevice(serial_port)
 
     def _updateThread(self):
-        while self._check_updates:
-            container_stack = self._application.getGlobalContainerStack()
-            if container_stack is None:
-                time.sleep(5)
-                continue
+        container_stack = self._application.getGlobalContainerStack()
+        if container_stack is not None and self._check_updates:
             port_list = []  # Just an empty list; all USB devices will be removed.
             if container_stack.getMetaDataEntry("supports_usb_connection"):
                 machine_file_formats = [file_type.strip() for file_type in container_stack.getMetaDataEntry("file_formats").split(";")]
                 if "text/x-gcode" in machine_file_formats:
                     port_list = self.getSerialPortList(only_list_usb=True)
             self._addRemovePorts(port_list)
-            time.sleep(5)
 
     ##  Helper to identify serial ports (and scan for them)
     def _addRemovePorts(self, serial_ports):
@@ -109,9 +105,15 @@ class USBPrinterOutputDeviceManager(QObj
     #   \param only_list_usb If true, only usb ports are listed
     def getSerialPortList(self, only_list_usb = False):
         base_list = []
-        for port in serial.tools.list_ports.comports():
+        try:
+            port_list = serial.tools.list_ports.comports()
+        except TypeError:  # Bug in PySerial causes a TypeError if port gets disconnected while processing.
+            port_list = []
+        for port in port_list:
             if not isinstance(port, tuple):
                 port = (port.device, port.description, port.hwid)
+            if not port[2]:  # HWID may be None if the device is not USB or the system doesn't report the type.
+                continue
             if only_list_usb and not port[2].startswith("USB"):
                 continue
 
diff -upNr Cura-4.6.2.orig/plugins/USBPrinting/USBPrinterOutputDevice.py Cura-4.6.2.patched/plugins/USBPrinting/USBPrinterOutputDevice.py
--- Cura-4.6.2.orig/plugins/USBPrinting/USBPrinterOutputDevice.py	2020-07-13 16:45:04.000000000 +0200
+++ Cura-4.6.2.patched/plugins/USBPrinting/USBPrinterOutputDevice.py	2020-07-30 21:27:02.588384308 +0200
@@ -260,8 +260,8 @@ class USBPrinterOutputDevice(PrinterOutp
                     self.sendCommand("M105")
                     self._last_temperature_request = time()
 
-            if re.search(b"[B|T\d*]: ?\d+\.?\d*", line):  # Temperature message. 'T:' for extruder and 'B:' for bed
-                extruder_temperature_matches = re.findall(b"T(\d*): ?(\d+\.?\d*)\s*\/?(\d+\.?\d*)?", line)
+            if re.search(r"[B|T\d*]: ?\d+\.?\d*", line):  # Temperature message. 'T:' for extruder and 'B:' for bed
+                extruder_temperature_matches = re.findall(r"T(\d*): ?(\d+\.?\d*)\s*\/?(\d+\.?\d*)?", line)
                 # Update all temperature values
                 matched_extruder_nrs = []
                 for match in extruder_temperature_matches:
@@ -283,7 +283,7 @@ class USBPrinterOutputDevice(PrinterOutp
                     if match[2]:
                         extruder.updateTargetHotendTemperature(float(match[2]))
 
-                bed_temperature_matches = re.findall(b"B: ?(\d+\.?\d*)\s*\/?(\d+\.?\d*)?", line)
+                bed_temperature_matches = re.findall(r"B: ?(\d+\.?\d*)\s*\/?(\d+\.?\d*)?", line)
                 if bed_temperature_matches:
                     match = bed_temperature_matches[0]
                     if match[0]:
