diff -upNr Uranium.orig/CMakeLists.txt Uranium.patched/CMakeLists.txt
--- Uranium.orig/CMakeLists.txt	2021-05-15 14:13:47.697029258 +0200
+++ Uranium.patched/CMakeLists.txt	2021-05-15 14:49:32.983844134 +0200
@@ -53,8 +53,9 @@ if(EXISTS /etc/debian_version)
 else()
     install(DIRECTORY UM DESTINATION lib${LIB_SUFFIX}/python${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}/site-packages)
 endif()
-install(FILES ${CMAKE_SOURCE_DIR}/cmake/UraniumTranslationTools.cmake
-        DESTINATION ${CMAKE_INSTALL_DATADIR}/cmake-${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}/Modules/ )
+
+install(DIRECTORY cmake DESTINATION ${CMAKE_INSTALL_DATADIR}/uranium)
+install(DIRECTORY scripts DESTINATION ${CMAKE_INSTALL_DATADIR}/uranium)
 install(DIRECTORY resources DESTINATION ${CMAKE_INSTALL_DATADIR}/uranium)
 
 # Detect plugins to install
diff -upNr Uranium.orig/plugins/ConsoleLogger/ConsoleLogger.py Uranium.patched/plugins/ConsoleLogger/ConsoleLogger.py
--- Uranium.orig/plugins/ConsoleLogger/ConsoleLogger.py	2021-05-15 14:13:47.709029268 +0200
+++ Uranium.patched/plugins/ConsoleLogger/ConsoleLogger.py	2021-05-15 14:49:32.983844134 +0200
@@ -25,7 +25,7 @@ class ConsoleLogger(LogOutput):
     def __init__(self) -> None:
         super().__init__()
         self._logger = logging.getLogger(self._name) # Create python logger
-        self._logger.setLevel(logging.DEBUG)
+        self._logger.setLevel(logging.ERROR)
         stream_handler = logging.StreamHandler() # Log to stream
         stream_handler.setFormatter(logging_formatter)
         self._logger.addHandler(stream_handler)
diff -upNr Uranium.orig/UM/Application.py Uranium.patched/UM/Application.py
--- Uranium.orig/UM/Application.py	2021-05-15 14:13:47.697029258 +0200
+++ Uranium.patched/UM/Application.py	2021-05-15 18:26:40.729004415 +0200
@@ -204,15 +204,8 @@ class Application:
 
         self._plugin_registry = PluginRegistry(self)
 
-        self._plugin_registry.addPluginLocation(os.path.join(app_root, "share", "uranium", "plugins"))
-        self._plugin_registry.addPluginLocation(os.path.join(app_root, "share", "cura", "plugins"))
-
         self._plugin_registry.addPluginLocation(os.path.join(self._app_install_dir, "lib", "uranium"))
-        self._plugin_registry.addPluginLocation(os.path.join(self._app_install_dir, "lib64", "uranium"))
-        self._plugin_registry.addPluginLocation(os.path.join(self._app_install_dir, "lib32", "uranium"))
         self._plugin_registry.addPluginLocation(os.path.join(os.path.dirname(sys.executable), "plugins"))
-        self._plugin_registry.addPluginLocation(os.path.join(self._app_install_dir, "Resources", "uranium", "plugins"))
-        self._plugin_registry.addPluginLocation(os.path.join(self._app_install_dir, "Resources", self._app_name, "plugins"))
         # Locally installed plugins
         local_path = os.path.join(Resources.getStoragePath(Resources.Resources), "plugins")
         # Ensure the local plugins directory exists
diff -upNr Uranium.orig/UM/PluginRegistry.py Uranium.patched/UM/PluginRegistry.py
--- Uranium.orig/UM/PluginRegistry.py	2021-05-15 14:13:47.701029262 +0200
+++ Uranium.patched/UM/PluginRegistry.py	2021-05-15 18:28:19.557155784 +0200
@@ -202,7 +202,7 @@ class PluginRegistry(QObject):
     #   Add a plugin location to the list of locations to search:
     def addPluginLocation(self, location: str) -> None:
         if not os.path.isdir(location):
-            Logger.warning("Plugin location {0} must be a folder.".format(location))
+            # Logger.warning("Plugin location {0} must be a folder.".format(location))
             return
 
         self._plugin_locations.append(location)
diff -upNr Uranium.orig/UM/Settings/InstanceContainer.py Uranium.patched/UM/Settings/InstanceContainer.py
--- Uranium.orig/UM/Settings/InstanceContainer.py	2021-05-15 14:13:47.705029264 +0200
+++ Uranium.patched/UM/Settings/InstanceContainer.py	2021-05-15 14:49:32.983844134 +0200
@@ -50,9 +50,9 @@ class InstanceContainer(QObject, Contain
     """A container for SettingInstance objects."""
 
     Version = 4
-    version_regex = re.compile("\nversion ?= ?(\d+)")
-    setting_version_regex = re.compile("\nsetting_version ?= ?(\d+)")
-    type_regex = re.compile("\ntype ?= ?(\w+)")
+    version_regex = re.compile("\nversion ?= ?(\\d+)")
+    setting_version_regex = re.compile("\nsetting_version ?= ?(\\d+)")
+    type_regex = re.compile("\ntype ?= ?(\\w+)")
 
     def __init__(self, container_id: str, parent: QObject = None, *args: Any, **kwargs: Any) -> None:
         """Constructor
diff -upNr Uranium.orig/UM/VersionUpgradeManager.py Uranium.patched/UM/VersionUpgradeManager.py
--- Uranium.orig/UM/VersionUpgradeManager.py	2021-05-15 14:13:47.709029268 +0200
+++ Uranium.patched/UM/VersionUpgradeManager.py	2021-05-15 14:49:32.983844134 +0200
@@ -95,21 +95,21 @@ class VersionUpgradeManager:
 
         #Regular expressions of the files that should not be checked, such as log files.
         self._ignored_files = [
-            ".*\.lock",       # Don't upgrade the configuration file lock. It's not persistent.
-            "plugins\.json",  # plugins.json and packages.json need to remain the same for the version upgrade plug-ins.
-            "packages\.json",
-            ".*\.log",        # Don't process the log. It's not needed and it could be really big.
-            ".*\.log.?",      # Don't process the backup of the log. It's not needed and it could be really big.
-            "3.[0-3]\\.*",    # Don't upgrade folders that are back-ups from older version upgrades. Until v3.3 we stored the back-up in the config folder itself.
-            "3.[0-3]/.*",
-            "2.[0-7]\\.*",
-            "2.[0-7]/.*",
-            "cura\\.*",
-            "cura/.*",
-            "plugins\\.*",    # Don't upgrade manually installed plug-ins.
-            "plugins/.*",
-            "./*packages\.json",
-            "./*plugins\.json"
+            r".*\.lock",       # Don't upgrade the configuration file lock. It's not persistent.
+            r"plugins\.json",  # plugins.json and packages.json need to remain the same for the version upgrade plug-ins.
+            r"packages\.json",
+            r".*\.log",        # Don't process the log. It's not needed and it could be really big.
+            r".*\.log.?",      # Don't process the backup of the log. It's not needed and it could be really big.
+            r"3.[0-3]\\.*",    # Don't upgrade folders that are back-ups from older version upgrades. Until v3.3 we stored the back-up in the config folder itself.
+            r"3.[0-3]/.*",
+            r"2.[0-7]\\.*",
+            r"2.[0-7]/.*",
+            r"cura\\.*",
+            r"cura/.*",
+            r"plugins\\.*",    # Don't upgrade manually installed plug-ins.
+            r"plugins/.*",
+            r"./*packages\.json",
+            r"./*plugins\.json"
         ]  # type: List[str]
 
     def registerIgnoredFile(self, file_name: str) -> None:
diff -upNr Uranium.orig/UM/VersionUpgrade.py Uranium.patched/UM/VersionUpgrade.py
--- Uranium.orig/UM/VersionUpgrade.py	2021-05-15 14:13:47.709029268 +0200
+++ Uranium.patched/UM/VersionUpgrade.py	2021-05-15 14:49:32.983844134 +0200
@@ -19,8 +19,8 @@ class VersionUpgrade(PluginObject):
         """Initialises a version upgrade plugin instance."""
 
         super().__init__()
-        self._version_regex = re.compile("\nversion ?= ?(\d+)")
-        self._setting_version_regex = re.compile("\nsetting_version ?= ?(\d+)")
+        self._version_regex = re.compile("\nversion ?= ?(\\d+)")
+        self._setting_version_regex = re.compile("\nsetting_version ?= ?(\\d+)")
 
     def getCfgVersion(self, serialised: str) -> int:
         """
