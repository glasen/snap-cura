diff --git a/CMakeLists.txt b/CMakeLists.txt
index c68058e7..c7e5f734 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -50,8 +50,9 @@ if(EXISTS /etc/debian_version)
 else()
     install(DIRECTORY UM DESTINATION lib${LIB_SUFFIX}/python${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}/site-packages)
 endif()
-install(FILES ${CMAKE_SOURCE_DIR}/cmake/UraniumTranslationTools.cmake
-        DESTINATION ${CMAKE_INSTALL_DATADIR}/cmake-${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}/Modules/ )
+
+install(DIRECTORY cmake DESTINATION ${CMAKE_INSTALL_DATADIR}/uranium)
+install(DIRECTORY scripts DESTINATION ${CMAKE_INSTALL_DATADIR}/uranium)
 install(DIRECTORY resources DESTINATION ${CMAKE_INSTALL_DATADIR}/uranium)
 
 # Detect plugins to install
diff --git a/UM/Settings/InstanceContainer.py b/UM/Settings/InstanceContainer.py
index 0f3a163b..5feed4e8 100644
--- a/UM/Settings/InstanceContainer.py
+++ b/UM/Settings/InstanceContainer.py
@@ -50,9 +50,9 @@ class InstanceContainer(QObject, ContainerInterface, PluginObject):
     """A container for SettingInstance objects."""
 
     Version = 4
-    version_regex = re.compile("\nversion ?= ?(\d+)")
-    setting_version_regex = re.compile("\nsetting_version ?= ?(\d+)")
-    type_regex = re.compile("\ntype ?= ?(\w+)")
+    version_regex = re.compile("\nversion ?= ?(\\d+)")
+    setting_version_regex = re.compile("\nsetting_version ?= ?(\\d+)")
+    type_regex = re.compile("\ntype ?= ?(\\w+)")
 
     def __init__(self, container_id: str, parent: QObject = None, *args: Any, **kwargs: Any) -> None:
         """Constructor
diff --git a/UM/VersionUpgrade.py b/UM/VersionUpgrade.py
index 2b561ce7..5d92f871 100644
--- a/UM/VersionUpgrade.py
+++ b/UM/VersionUpgrade.py
@@ -19,8 +19,8 @@ class VersionUpgrade(PluginObject):
         """Initialises a version upgrade plugin instance."""
 
         super().__init__()
-        self._version_regex = re.compile("\nversion ?= ?(\d+)")
-        self._setting_version_regex = re.compile("\nsetting_version ?= ?(\d+)")
+        self._version_regex = re.compile("\nversion ?= ?(\\d+)")
+        self._setting_version_regex = re.compile("\nsetting_version ?= ?(\\d+)")
 
     def getCfgVersion(self, serialised: str) -> int:
         """
diff --git a/UM/VersionUpgradeManager.py b/UM/VersionUpgradeManager.py
index bcaa9c2d..6b06865c 100644
--- a/UM/VersionUpgradeManager.py
+++ b/UM/VersionUpgradeManager.py
@@ -95,21 +95,21 @@ class VersionUpgradeManager:
 
         #Regular expressions of the files that should not be checked, such as log files.
         self._ignored_files = [
-            ".*\.lock",       # Don't upgrade the configuration file lock. It's not persistent.
-            "plugins\.json",  # plugins.json and packages.json need to remain the same for the version upgrade plug-ins.
-            "packages\.json",
-            ".*\.log",        # Don't process the log. It's not needed and it could be really big.
-            ".*\.log.?",      # Don't process the backup of the log. It's not needed and it could be really big.
-            "3.[0-3]\\.*",    # Don't upgrade folders that are back-ups from older version upgrades. Until v3.3 we stored the back-up in the config folder itself.
-            "3.[0-3]/.*",
-            "2.[0-7]\\.*",
-            "2.[0-7]/.*",
-            "cura\\.*",
-            "cura/.*",
-            "plugins\\.*",    # Don't upgrade manually installed plug-ins.
-            "plugins/.*",
-            "./*packages\.json",
-            "./*plugins\.json"
+            r".*\.lock",       # Don't upgrade the configuration file lock. It's not persistent.
+            r"plugins\.json",  # plugins.json and packages.json need to remain the same for the version upgrade plug-ins.
+            r"packages\.json",
+            r".*\.log",        # Don't process the log. It's not needed and it could be really big.
+            r".*\.log.?",      # Don't process the backup of the log. It's not needed and it could be really big.
+            r"3.[0-3]\\.*",    # Don't upgrade folders that are back-ups from older version upgrades. Until v3.3 we stored the back-up in the config folder itself.
+            r"3.[0-3]/.*",
+            r"2.[0-7]\\.*",
+            r"2.[0-7]/.*",
+            r"cura\\.*",
+            r"cura/.*",
+            r"plugins\\.*",    # Don't upgrade manually installed plug-ins.
+            r"plugins/.*",
+            r"./*packages\.json",
+            r"./*plugins\.json"
         ]  # type: List[str]
 
     def registerIgnoredFile(self, file_name: str) -> None:
diff --git a/plugins/ConsoleLogger/ConsoleLogger.py b/plugins/ConsoleLogger/ConsoleLogger.py
index 871c0523..d93a8dc9 100644
--- a/plugins/ConsoleLogger/ConsoleLogger.py
+++ b/plugins/ConsoleLogger/ConsoleLogger.py
@@ -25,7 +25,7 @@ class ConsoleLogger(LogOutput):
     def __init__(self) -> None:
         super().__init__()
         self._logger = logging.getLogger(self._name) # Create python logger
-        self._logger.setLevel(logging.DEBUG)
+        self._logger.setLevel(logging.ERROR)
         stream_handler = logging.StreamHandler() # Log to stream
         stream_handler.setFormatter(logging_formatter)
         self._logger.addHandler(stream_handler)
